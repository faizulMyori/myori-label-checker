// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface sqlite {
  db_login: (username: any, password: any) => Promise<void>;

  create_product: (data: any) => Promise<void>;
  get_products: () => Promise<void>;
  search_products: (query: string) => Promise<void>;
  update_product: (data: any) => Promise<void>;
  delete_product: (id: any) => Promise<void>;

  create_license: (data: any) => Promise<void>;
  get_licenses: () => Promise<void>;
  search_licenses: (query: string) => Promise<void>;
  update_license: (data: any) => Promise<void>;
  delete_license: (id: any) => Promise<void>;

  create_user: (data: any) => Promise<void>;
  get_users: () => Promise<void>;
  search_users: (query: string) => Promise<void>;
  update_user: (data: any) => Promise<void>;
  delete_user: (id: any) => Promise<void>;

  create_batch: (data: any) => Promise<void>;
  get_batchs: () => Promise<void>;
  search_batchs: (query: string) => Promise<void>;
  update_batch: (data: any) => Promise<void>;
  delete_batch: (id: any) => Promise<void>;

  create_label: (data: any) => Promise<void>;
  get_labels: () => Promise<void>;
  search_labels: (query: string) => Promise<void>;
  update_label: (data: any) => Promise<void>;
  delete_label: (id: any) => Promise<void>;
  check_serial_numbers: (data: any) => Promise<void>;

  create_history: (data: any) => Promise<void>;
  get_histories: () => Promise<void>;
  search_histories: (query: string) => Promise<void>;
  update_history: (data: any) => Promise<void>;
  delete_history: (id: any) => Promise<void>;

  create_connection: (ip: any, port: any, com: any) => Promise<void>;
  get_connections: () => Promise<void>;
}

interface tcpConnection {
  tcp_connect: (connectionDetails: any) => Promise<void>;
  tcp_disconnect: () => Promise<void>;
  tcp_closed: (callback: any) => Promise<void>;
  tcp_received: (callback: any) => Promise<void>;
  tcp_send: (data: any) => Promise<void>;
}

interface excel {
  save_to_excel: (metadata: any, data: any, title: string) => Promise<void>;
}

interface serial {
  serial_com_get: () => Promise<void>;
  serial_com_open: (port: any) => Promise<void>;
  serial_com_close: () => Promise<void>;
  serial_com_send: (data: any) => Promise<void>;
  serial_com_disconnect: () => Promise<void>;
}

interface disk {
  disk_get: () => Promise<void>;
  disk_check_space: () => Promise<void>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  sqlite: sqlite;
  tcpConnection: tcpConnection;
  excel: excel;
  serial: serial;
  disk: disk;
}
